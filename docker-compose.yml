version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      retries: 5
      timeout: 5s

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      retries: 5
      timeout: 5s

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: catalog_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-service:
    build:
      context: .
      dockerfile: ./discovery-service/Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1" ]
      interval: 10s
      retries: 5
      timeout: 5s

  order-service:
    build:
      context: .   # racine du projet
      dockerfile: ./order-service/Dockerfile
    container_name: order-service
    depends_on:
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8084:8084"

  user-service:
    build:
      context: .   # racine du projet
      dockerfile: ./user-service/Dockerfile
    container_name: user-service
    depends_on:
      discovery-service:
        condition: service_healthy
      mongo:
        condition: service_healthy
    ports:
      - "8082:8082"

  catalog-service:
    build:
      context: .   # racine du projet
      dockerfile: ./catalog-service/Dockerfile
    container_name: catalog-service
    depends_on:
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"

  api-gateway:
    build:
      context: .   # racine du projet
      dockerfile: ./api-gateway/Dockerfile
    container_name: api-gateway
    depends_on:
      discovery-service:
        condition: service_healthy
    ports:
      - "8081:8081"

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongo_data:
  postgres_data:

